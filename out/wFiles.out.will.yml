format: willfile-1.0.0
about:
  name: wFiles
  description: >-
    Collection of classes to abstract files systems. Many interfaces provide
    files, but not called as file systems and treated differently. For example
    server-side gives access to local files and browser-side HTTP/HTTPS protocol
    gives access to files as well, but in the very different way, it does the
    first. This problem forces a developer to break fundamental programming
    principle DRY and make code written to solve a problem not applicable to the
    same problem, on another platform/technology. Files treats any
    file-system-like interface as files system. Files combines all files
    available to the application into the single namespace where each file has
    unique Path/URI, so that operating with several files on different files
    systems is not what user of the module should worry about. If Files does not
    have an adapter for your files system you may design it providing a short
    list of stupid methods fulfilling completely or partly good defined API and
    get access to all sophisticated general algorithms on files for free. Who
    said files is only externals? Files makes possible to treat internals of a
    program as files system(s). Use the module to keep DRY.
  enabled: 1
  version: 0.6.580
  interpreters: &ref_0
    - nodejs >= 6.0.0
    - chrome >= 60.0.0
    - firefox >= 60.0.0
  keywords: &ref_1
    - wTools
path:
  module.willfiles:
    criterion:
      predefined: 1
    path: wFiles.out.will.yml
  module.common:
    criterion:
      predefined: 1
    path: wFiles.out
  module.original.willfiles:
    criterion:
      predefined: 1
    path:
      - ../.im.will.yml
      - ../.ex.will.yml
  local:
    criterion:
      predefined: 1
  remote:
    criterion:
      predefined: 1
  in:
    criterion:
      predefined: 0
    path: .
  temp:
    path: .
  out:
    criterion:
      predefined: 0
    path: .
  out.debug:
    criterion:
      debug: 1
    path: debug
  out.release:
    criterion:
      debug: 0
    path: release
  proto:
    path: ../proto
  repository:
    path: 'git+https:///github.com/Wandalen/wFiles.git'
  bugs:
    path: 'https:///github.com/Wandalen/wFiles/issues'
  exported.dir.proto.export:
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
    path: ../proto
  exported.files.proto.export:
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
    path:
      - ../proto
      - ../proto/dwtools
      - ../proto/dwtools/Tools.s
      - ../proto/dwtools/abase
      - ../proto/dwtools/amid
      - ../proto/dwtools/amid/files
      - ../proto/dwtools/amid/files/UseBase.s
      - ../proto/dwtools/amid/files/UseMid.s
      - ../proto/dwtools/amid/files/UseTop.s
      - ../proto/dwtools/amid/files/l1
      - ../proto/dwtools/amid/files/l1/Encoders.s
      - ../proto/dwtools/amid/files/l1/FileRecord.s
      - ../proto/dwtools/amid/files/l1/FileRecordFactory.s
      - ../proto/dwtools/amid/files/l1/FileRecordFilter.s
      - ../proto/dwtools/amid/files/l1/FileRoutines.s
      - ../proto/dwtools/amid/files/l1/FileStat.s
      - ../proto/dwtools/amid/files/l1/Path.s
      - ../proto/dwtools/amid/files/l1/Path.ss
      - ../proto/dwtools/amid/files/l2
      - ../proto/dwtools/amid/files/l2/Abstract.s
      - ../proto/dwtools/amid/files/l2/Partial.s
      - ../proto/dwtools/amid/files/l3
      - ../proto/dwtools/amid/files/l3/FindMixin.s
      - ../proto/dwtools/amid/files/l3/SecondaryMixin.s
      - ../proto/dwtools/amid/files/l5_provider
      - ../proto/dwtools/amid/files/l5_provider/Extract.s
      - ../proto/dwtools/amid/files/l5_provider/Git.ss
      - ../proto/dwtools/amid/files/l5_provider/HardDrive.ss
      - ../proto/dwtools/amid/files/l5_provider/HtmlDocument.js
      - ../proto/dwtools/amid/files/l5_provider/Http.js
      - ../proto/dwtools/amid/files/l5_provider/Http.ss
      - ../proto/dwtools/amid/files/l5_provider/Npm.ss
      - ../proto/dwtools/amid/files/l5_provider/RemoteClient.s
      - ../proto/dwtools/amid/files/l5_provider/RemoteServlet.ss
      - ../proto/dwtools/amid/files/l5_provider/Svn.ss
      - ../proto/dwtools/amid/files/l7
      - ../proto/dwtools/amid/files/l7/Hub.s
      - ../proto/dwtools/amid/files/l8_filter
      - ../proto/dwtools/amid/files/l8_filter/Image.s
      - ../proto/dwtools/amid/files/l8_filter/Reroot.s
      - ../proto/dwtools/amid/files/l9
      - ../proto/dwtools/amid/files.test
      - ../proto/dwtools/amid/files.test/aFileProvider.test.s
      - ../proto/dwtools/amid/files.test/aFilesFind.test.s
      - ../proto/dwtools/amid/files.test/Extract.html
      - ../proto/dwtools/amid/files.test/Extract.test.s
      - ../proto/dwtools/amid/files.test/Files.copy.test.s
      - ../proto/dwtools/amid/files.test/Files.etc.test.ss
      - ../proto/dwtools/amid/files.test/FilesFind.Extract.test.s
      - ../proto/dwtools/amid/files.test/FilesFind.HardDrive.test.ss
      - ../proto/dwtools/amid/files.test/FilesRead.test.s
      - ../proto/dwtools/amid/files.test/Git.test.ss
      - ../proto/dwtools/amid/files.test/HardDrive.test.ss
      - ../proto/dwtools/amid/files.test/Hub.copy.test.ss
      - ../proto/dwtools/amid/files.test/Hub.Extract.test.s
      - ../proto/dwtools/amid/files.test/Hub.HardDrive.test.ss
      - ../proto/dwtools/amid/files.test/Npm.test.ss
      - ../proto/dwtools/amid/files.test/Path.test.ss
      - ../proto/dwtools/amid/files.test/Record.test.s
      - ../proto/dwtools/amid/files.test/RecordFilter.test.s
      - ../proto/dwtools/amid/files.test/Uri.test.ss
      - ../proto/dwtools/atop
submodule: {}
reflector:
  reflect.proto.:
    src:
      filePath:
        'path::proto': 'path::out.*=1'
    mandatory: 1
    criterion:
      debug: 0
    inherit:
      - predefined.*
  reflect.proto.debug:
    src:
      filePath:
        'path::proto': 'path::out.*=1'
    mandatory: 1
    criterion:
      debug: 1
    inherit:
      - predefined.*
  reflect.submodules:
    src:
      filePath:
        'submodule::*/exported::*=1/path::exportedDir*=1': 'path::out.*=1'
    mandatory: 1
    criterion:
      debug: 1
    inherit:
      - predefined.*
  exported.proto.export:
    src:
      filePath:
        .: ''
      prefixPath: ../proto
    mandatory: 1
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
  exported.files.proto.export:
    src:
      filePath:
        'path::exported.files.proto.export': ''
      basePath: .
      prefixPath: 'path::exported.dir.proto.export'
    recursive: 0
    mandatory: 1
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
step:
  clean.out.:
    opts:
      filePath: 'path::out.debug'
    criterion:
      debug: 0
    inherit:
      - files.delete
  clean.out.debug:
    opts:
      filePath: 'path::out.debug'
    criterion:
      debug: 1
    inherit:
      - files.delete
  reflect.proto.:
    opts:
      reflector: 'reflector::reflect.proto.*=1'
    criterion:
      debug: 0
      raw: 0
    inherit:
      - files.reflect
  reflect.proto.debug:
    opts:
      reflector: 'reflector::reflect.proto.*=1'
    criterion:
      debug: 1
      raw: 0
    inherit:
      - files.reflect
  reflect.proto.raw:
    opts:
      reflector: 'reflector::reflect.proto.*=1'
    criterion:
      debug: 0
      raw: 1
    inherit:
      - files.reflect
  reflect.proto.debug.raw:
    opts:
      reflector: 'reflector::reflect.proto.*=1'
    criterion:
      debug: 1
      raw: 1
    inherit:
      - files.reflect
  reflect.submodules.:
    opts:
      reflector: 'reflector::reflect.submodules*=1'
    criterion:
      debug: 1
      raw: 0
    inherit:
      - files.reflect
  reflect.submodules.raw:
    opts:
      reflector: 'reflector::reflect.submodules*=1'
    criterion:
      debug: 1
      raw: 1
    inherit:
      - files.reflect
  reflect.submodules:
    opts:
      reflector: 'reflector::reflect.submodules*'
    criterion:
      debug: 1
    inherit:
      - files.reflect
  export.proto:
    opts:
      export: 'path::proto'
      tar: 0
    criterion:
      debug: 1
      proto: 1
    inherit:
      - module.export
build:
  debug.raw:
    steps:
      - 'step::clean.out*=1'
      - 'step::reflect.proto.*=1'
    criterion:
      default: 1
      debug: 1
      raw: 1
  debug.compiled:
    steps:
      - 'step::clean.out*=1'
      - 'step::reflect.proto.*=1'
    criterion:
      debug: 1
      raw: 0
  release.raw:
    steps:
      - 'step::clean.out*=1'
      - 'step::reflect.proto.*=1'
    criterion:
      debug: 0
      raw: 1
  release.compiled:
    steps:
      - 'step::clean.out*=1'
      - 'step::reflect.proto.*=1'
    criterion:
      debug: 0
      raw: 0
  all:
    steps:
      - 'build::debug.raw'
      - 'build::release.compiled'
  proto.export:
    steps:
      - 'build::debug.raw'
      - 'step::export.proto'
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
exported:
  proto.export:
    version: 0.6.580
    exportedReflector: 'reflector::exported.proto.export'
    exportedFilesReflector: 'reflector::exported.files.proto.export'
    exportedDirPath: 'path::exported.dir.proto.export'
    exportedFilesPath: 'path::exported.files.proto.export'
    criterion:
      default: 1
      debug: 1
      raw: 1
      proto: 1
      export: 1
      tar: 1
      public: 1
module:
  ../:
    about:
      name: wFiles
      description: >-
        Collection of classes to abstract files systems. Many interfaces provide
        files, but not called as file systems and treated differently. For
        example server-side gives access to local files and browser-side
        HTTP/HTTPS protocol gives access to files as well, but in the very
        different way, it does the first. This problem forces a developer to
        break fundamental programming principle DRY and make code written to
        solve a problem not applicable to the same problem, on another
        platform/technology. Files treats any file-system-like interface as
        files system. Files combines all files available to the application into
        the single namespace where each file has unique Path/URI, so that
        operating with several files on different files systems is not what user
        of the module should worry about. If Files does not have an adapter for
        your files system you may design it providing a short list of stupid
        methods fulfilling completely or partly good defined API and get access
        to all sophisticated general algorithms on files for free. Who said
        files is only externals? Files makes possible to treat internals of a
        program as files system(s). Use the module to keep DRY.
      enabled: 1
      version: 0.6.580
      interpreters: *ref_0
      keywords: *ref_1
    path:
      module.willfiles:
        criterion:
          predefined: 1
        path:
          - .im.will.yml
          - .ex.will.yml
      module.original.willfiles:
        criterion:
          predefined: 1
        path:
          - .im.will.yml
          - .ex.will.yml
      module.common:
        criterion:
          predefined: 1
        path: ./
      local:
        criterion:
          predefined: 1
      remote:
        criterion:
          predefined: 1
      in:
        criterion:
          predefined: 0
        path: .
      temp:
        path: out
      out:
        criterion:
          predefined: 0
        path: out
      out.debug:
        criterion:
          debug: 1
        path: ./out/debug
      out.release:
        criterion:
          debug: 0
        path: ./out/release
      proto:
        path: ./proto
      repository:
        path: 'git+https:///github.com/Wandalen/wFiles.git'
      bugs:
        path: 'https:///github.com/Wandalen/wFiles/issues'
      exported.dir.proto.export:
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
        path: ./proto
      exported.files.proto.export:
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
        path:
          - proto
          - proto/dwtools
          - proto/dwtools/Tools.s
          - proto/dwtools/abase
          - proto/dwtools/amid
          - proto/dwtools/amid/files
          - proto/dwtools/amid/files/UseBase.s
          - proto/dwtools/amid/files/UseMid.s
          - proto/dwtools/amid/files/UseTop.s
          - proto/dwtools/amid/files/l1
          - proto/dwtools/amid/files/l1/Encoders.s
          - proto/dwtools/amid/files/l1/FileRecord.s
          - proto/dwtools/amid/files/l1/FileRecordFactory.s
          - proto/dwtools/amid/files/l1/FileRecordFilter.s
          - proto/dwtools/amid/files/l1/FileRoutines.s
          - proto/dwtools/amid/files/l1/FileStat.s
          - proto/dwtools/amid/files/l1/Path.s
          - proto/dwtools/amid/files/l1/Path.ss
          - proto/dwtools/amid/files/l2
          - proto/dwtools/amid/files/l2/Abstract.s
          - proto/dwtools/amid/files/l2/Partial.s
          - proto/dwtools/amid/files/l3
          - proto/dwtools/amid/files/l3/FindMixin.s
          - proto/dwtools/amid/files/l3/SecondaryMixin.s
          - proto/dwtools/amid/files/l5_provider
          - proto/dwtools/amid/files/l5_provider/Extract.s
          - proto/dwtools/amid/files/l5_provider/Git.ss
          - proto/dwtools/amid/files/l5_provider/HardDrive.ss
          - proto/dwtools/amid/files/l5_provider/HtmlDocument.js
          - proto/dwtools/amid/files/l5_provider/Http.js
          - proto/dwtools/amid/files/l5_provider/Http.ss
          - proto/dwtools/amid/files/l5_provider/Npm.ss
          - proto/dwtools/amid/files/l5_provider/RemoteClient.s
          - proto/dwtools/amid/files/l5_provider/RemoteServlet.ss
          - proto/dwtools/amid/files/l5_provider/Svn.ss
          - proto/dwtools/amid/files/l7
          - proto/dwtools/amid/files/l7/Hub.s
          - proto/dwtools/amid/files/l8_filter
          - proto/dwtools/amid/files/l8_filter/Image.s
          - proto/dwtools/amid/files/l8_filter/Reroot.s
          - proto/dwtools/amid/files/l9
          - proto/dwtools/amid/files.test
          - proto/dwtools/amid/files.test/aFileProvider.test.s
          - proto/dwtools/amid/files.test/aFilesFind.test.s
          - proto/dwtools/amid/files.test/Extract.html
          - proto/dwtools/amid/files.test/Extract.test.s
          - proto/dwtools/amid/files.test/Files.copy.test.s
          - proto/dwtools/amid/files.test/Files.etc.test.ss
          - proto/dwtools/amid/files.test/FilesFind.Extract.test.s
          - proto/dwtools/amid/files.test/FilesFind.HardDrive.test.ss
          - proto/dwtools/amid/files.test/FilesRead.test.s
          - proto/dwtools/amid/files.test/Git.test.ss
          - proto/dwtools/amid/files.test/HardDrive.test.ss
          - proto/dwtools/amid/files.test/Hub.copy.test.ss
          - proto/dwtools/amid/files.test/Hub.Extract.test.s
          - proto/dwtools/amid/files.test/Hub.HardDrive.test.ss
          - proto/dwtools/amid/files.test/Npm.test.ss
          - proto/dwtools/amid/files.test/Path.test.ss
          - proto/dwtools/amid/files.test/Record.test.s
          - proto/dwtools/amid/files.test/RecordFilter.test.s
          - proto/dwtools/amid/files.test/Uri.test.ss
          - proto/dwtools/atop
    submodule: {}
    reflector:
      reflect.proto.:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 0
        inherit:
          - predefined.*
      reflect.proto.debug:
        src:
          filePath:
            'path::proto': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
      reflect.submodules:
        src:
          filePath:
            'submodule::*/exported::*=1/path::exportedDir*=1': 'path::out.*=1'
        mandatory: 1
        criterion:
          debug: 1
        inherit:
          - predefined.*
      exported.proto.export:
        src:
          filePath:
            .: ''
          prefixPath: proto
        mandatory: 1
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
      exported.files.proto.export:
        src:
          filePath:
            'path::exported.files.proto.export': ''
          basePath: .
          prefixPath: 'path::exported.dir.proto.export'
        recursive: 0
        mandatory: 1
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
    step:
      clean.out.:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 0
        inherit:
          - files.delete
      clean.out.debug:
        opts:
          filePath: 'path::out.debug'
        criterion:
          debug: 1
        inherit:
          - files.delete
      reflect.proto.:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.debug:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.proto.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
        inherit:
          - files.reflect
      reflect.proto.debug.raw:
        opts:
          reflector: 'reflector::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules.:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 0
        inherit:
          - files.reflect
      reflect.submodules.raw:
        opts:
          reflector: 'reflector::reflect.submodules*=1'
        criterion:
          debug: 1
          raw: 1
        inherit:
          - files.reflect
      reflect.submodules:
        opts:
          reflector: 'reflector::reflect.submodules*'
        criterion:
          debug: 1
        inherit:
          - files.reflect
      export.proto:
        opts:
          export: 'path::proto'
          tar: 0
        criterion:
          debug: 1
          proto: 1
        inherit:
          - module.export
    build:
      debug.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          default: 1
          debug: 1
          raw: 1
      debug.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 1
          raw: 0
      release.raw:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 1
      release.compiled:
        steps:
          - 'step::clean.out*=1'
          - 'step::reflect.proto.*=1'
        criterion:
          debug: 0
          raw: 0
      all:
        steps:
          - 'build::debug.raw'
          - 'build::release.compiled'
      proto.export:
        steps:
          - 'build::debug.raw'
          - 'step::export.proto'
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
    exported:
      proto.export:
        version: 0.6.580
        exportedReflector: 'reflector::exported.proto.export'
        exportedFilesReflector: 'reflector::exported.files.proto.export'
        exportedDirPath: 'path::exported.dir.proto.export'
        exportedFilesPath: 'path::exported.files.proto.export'
        criterion:
          default: 1
          debug: 1
          raw: 1
          proto: 1
          export: 1
          tar: 1
          public: 1
  wFiles.out: root
