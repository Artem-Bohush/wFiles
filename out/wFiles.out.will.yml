&ref_0
format: willfile-1.0.0
about:
  name: wFiles
  description: >-
    Collection of classes to abstract files systems. Many interfaces provide
    files, but not called as file systems and treated differently. For example
    server-side gives access to local files and browser-side HTTP/HTTPS protocol
    gives access to files as well, but in the very different way, it does the
    first. This problem forces a developer to break fundamental programming
    principle DRY and make code written to solve a problem not applicable to the
    same problem, on another platform/technology. Files treats any
    file-system-like interface as files system. Files combines all files
    available to the application into the single namespace where each file has
    unique Path/URI, so that operating with several files on different files
    systems is not what user of the module should worry about. If Files does not
    have an adapter for your files system you may design it providing a short
    list of stupid methods fulfilling completely or partly good defined API and
    get access to all sophisticated general algorithms on files for free. Who
    said files is only externals? Files makes possible to treat internals of a
    program as files system(s). Use the module to keep DRY.
  enabled: 1
  version: 0.6.580
  values:
    enabled: 1
    name: wFiles
    interpreters:
      - nodejs >= 6.0.0
      - chrome >= 60.0.0
      - firefox >= 60.0.0
    keywords:
      - wTools
path:
  module.willfiles: *ref_0
  module.original.willfiles: *ref_0
  module.dir: *ref_0
  local: *ref_0
  remote: *ref_0
  in: *ref_0
  temp: *ref_0
  out: *ref_0
  out.debug: *ref_0
  out.release: *ref_0
  proto: *ref_0
  repository: *ref_0
  bugs: *ref_0
  exported.dir.proto.export: *ref_0
  exported.files.proto.export: *ref_0
criterion:
  default: 1
  debug: 1
  raw: 1
  proto: 1
  export: 1
  tar: 1
  public: 1
submodule: {}
src:
  filePath: 'path::exported.files.proto.export'
  basePath: .
  prefixPath: 'path::exported.dir.proto.export'
mandatory: 1
inherit:
  - module.export
recursive: 0
reflector:
  reflect.proto.: *ref_0
  reflect.proto.debug: *ref_0
  reflect.submodules: *ref_0
  exported.proto.export: *ref_0
  exported.files.proto.export: *ref_0
opts:
  export: 'path::proto'
  tar: 0
step:
  clean.out.: *ref_0
  clean.out.debug: *ref_0
  reflect.proto.: *ref_0
  reflect.proto.debug: *ref_0
  reflect.proto.raw: *ref_0
  reflect.proto.debug.raw: *ref_0
  reflect.submodules.: *ref_0
  reflect.submodules.raw: *ref_0
  reflect.submodules: *ref_0
  export.proto: *ref_0
steps:
  - 'build::debug.raw'
  - 'step::export.proto'
build:
  debug.raw: *ref_0
  debug.compiled: *ref_0
  release.raw: *ref_0
  release.compiled: *ref_0
  all: *ref_0
  proto.export: *ref_0
version: 0.6.580
exportedReflector: 'reflector::exported.proto.export'
exportedFilesReflector: 'reflector::exported.files.proto.export'
exportedDirPath: 'path::exported.dir.proto.export'
exportedFilesPath: 'path::exported.files.proto.export'
exported:
  proto.export: *ref_0
module:
  wFiles.out: root
